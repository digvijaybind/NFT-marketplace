{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport contract from \"../contracts/bithuabi.json\";\nimport { ethers } from \"ethers\";\nimport { isMetaMaskInstalled, ethereum } from \"../config\";\nimport react, { useState, useEffect } from \"react\";\nimport ABI from \"../abis/BithuContract.json\";\nexport const mint = async mint_amount => {\n  _s();\n\n  const [signer, setSigner] = useState(null);\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  await provider.send(\"eth_requestAccounts\", []);\n  const signed = provider.getSigner();\n  setSigner(signed);\n  console.log(signed);\n  const metadata = \"ipfs://bafyreiatv2m3rs4qbu43hu2jqfdzqem6acirj3k7l5ihpvsvrtsajo65yi/metadata.json\";\n  const user = await signer.getAddress();\n  const address = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n  let contract = new ethers.Contract(address, ABI, signer);\n  let transaction = await contract.mint(user, metadata).wait;\n  let tx = await transaction.wait();\n  const receipt = await tx.wait();\n\n  if (isMetaMaskInstalled()) {\n    console.log(\"hi there\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    console.log(provider);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\"; // const nftContract = new ethers.Contract(contractAddress, contract, signer);\n\n    let txnHash = await nftContract.mint(ethereum.selectedAddress, mint_amount, {\n      gasLimit: \"285000\",\n      value: ethers.utils.parseEther((0.03 * mint_amount).toString())\n    });\n    return txnHash;\n  }\n};\n\n_s(mint, \"JTUxgAK2k/hgAbsHdm1nDhP0K2g=\");\n\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let totalMint = await nftContract.count();\n    return totalMint;\n  }\n};","map":{"version":3,"names":["contract","ethers","isMetaMaskInstalled","ethereum","react","useState","useEffect","ABI","mint","mint_amount","signer","setSigner","provider","providers","Web3Provider","window","send","signed","getSigner","console","log","metadata","user","getAddress","address","Contract","transaction","wait","tx","receipt","contractAddress","txnHash","nftContract","selectedAddress","gasLimit","value","utils","parseEther","toString","totalMintCount","totalMint","count"],"sources":["C:/Users/HP/Desktop/Matt/nft/bithu_main_files/bithu_v1.0/src/utils/Web3mint.js"],"sourcesContent":["import contract from \"../contracts/bithuabi.json\";\nimport { ethers } from \"ethers\";\nimport { isMetaMaskInstalled, ethereum } from \"../config\";\nimport react, { useState, useEffect } from \"react\";\nimport ABI from \"../abis/BithuContract.json\";\nexport const mint = async (mint_amount) => {\n  const [signer, setSigner] = useState(null);\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  await provider.send(\"eth_requestAccounts\", []);\n  const signed = provider.getSigner();\n  setSigner(signed);\n  console.log(signed);\n\n  const metadata =\n    \"ipfs://bafyreiatv2m3rs4qbu43hu2jqfdzqem6acirj3k7l5ihpvsvrtsajo65yi/metadata.json\";\n  const user = await signer.getAddress();\n  const address = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n  let contract = new ethers.Contract(address, ABI, signer);\n  let transaction = await contract.mint(user, metadata).wait;\n  let tx = await transaction.wait();\n  const receipt = await tx.wait();\n\n  if (isMetaMaskInstalled()) {\n    console.log(\"hi there\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    console.log(provider);\n\n    const signer = provider.getSigner();\n    const contractAddress = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n    // const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let txnHash = await nftContract.mint(\n      ethereum.selectedAddress,\n      mint_amount,\n      {\n        gasLimit: \"285000\",\n        value: ethers.utils.parseEther((0.03 * mint_amount).toString()),\n      }\n    );\n    return txnHash;\n  }\n};\n\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n\n    let totalMint = await nftContract.count();\n\n    return totalMint;\n  }\n};\n"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,4BAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,WAA9C;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,4BAAhB;AACA,OAAO,MAAMC,IAAI,GAAG,MAAOC,WAAP,IAAuB;EAAA;;EACzC,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;EAEA,MAAMO,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACZ,QAAzC,EAAmD,KAAnD,CAAjB;EACA,MAAMS,QAAQ,CAACI,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;EACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;EACAP,SAAS,CAACM,MAAD,CAAT;EACAE,OAAO,CAACC,GAAR,CAAYH,MAAZ;EAEA,MAAMI,QAAQ,GACZ,kFADF;EAEA,MAAMC,IAAI,GAAG,MAAMZ,MAAM,CAACa,UAAP,EAAnB;EACA,MAAMC,OAAO,GAAG,4CAAhB;EACA,IAAIxB,QAAQ,GAAG,IAAIC,MAAM,CAACwB,QAAX,CAAoBD,OAApB,EAA6BjB,GAA7B,EAAkCG,MAAlC,CAAf;EACA,IAAIgB,WAAW,GAAG,MAAM1B,QAAQ,CAACQ,IAAT,CAAcc,IAAd,EAAoBD,QAApB,EAA8BM,IAAtD;EACA,IAAIC,EAAE,GAAG,MAAMF,WAAW,CAACC,IAAZ,EAAf;EACA,MAAME,OAAO,GAAG,MAAMD,EAAE,CAACD,IAAH,EAAtB;;EAEA,IAAIzB,mBAAmB,EAAvB,EAA2B;IACzBiB,OAAO,CAACC,GAAR,CAAY,UAAZ;IACA,MAAMR,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCX,QAAlC,CAAjB;IACAgB,OAAO,CAACC,GAAR,CAAYR,QAAZ;IAEA,MAAMF,MAAM,GAAGE,QAAQ,CAACM,SAAT,EAAf;IACA,MAAMY,eAAe,GAAG,4CAAxB,CANyB,CAOzB;;IACA,IAAIC,OAAO,GAAG,MAAMC,WAAW,CAACxB,IAAZ,CAClBL,QAAQ,CAAC8B,eADS,EAElBxB,WAFkB,EAGlB;MACEyB,QAAQ,EAAE,QADZ;MAEEC,KAAK,EAAElC,MAAM,CAACmC,KAAP,CAAaC,UAAb,CAAwB,CAAC,OAAO5B,WAAR,EAAqB6B,QAArB,EAAxB;IAFT,CAHkB,CAApB;IAQA,OAAOP,OAAP;EACD;AACF,CApCM;;GAAMvB,I;;AAsCb,OAAO,MAAM+B,cAAc,GAAG,YAAY;EACxC,IAAIrC,mBAAmB,EAAvB,EAA2B;IACzB,MAAMU,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCX,QAAlC,CAAjB;IACA,MAAMO,MAAM,GAAGE,QAAQ,CAACM,SAAT,EAAf;IACA,MAAMY,eAAe,GAAG,4CAAxB;IACA,MAAME,WAAW,GAAG,IAAI/B,MAAM,CAACwB,QAAX,CAAoBK,eAApB,EAAqC9B,QAArC,EAA+CU,MAA/C,CAApB;IAEA,IAAI8B,SAAS,GAAG,MAAMR,WAAW,CAACS,KAAZ,EAAtB;IAEA,OAAOD,SAAP;EACD;AACF,CAXM"},"metadata":{},"sourceType":"module"}
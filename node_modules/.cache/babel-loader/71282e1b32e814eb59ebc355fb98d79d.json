{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport contract from \"../contracts/bithuabi.json\";\nimport { ethers } from \"ethers\";\nimport { isMetaMaskInstalled, ethereum } from \"../config\";\nexport const mint = async mint_amount => {\n  _s();\n\n  useEffect(() => {\n    const fetchWallet = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      await provider.send(\"eth_requestAccounts\", []);\n      const signed = provider.getSigner();\n      setSigner(signed);\n      console.log(signed);\n    };\n\n    fetchWallet();\n  }, []);\n\n  if (isMetaMaskInstalled()) {\n    console.log(\"hi there\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    console.log(provider); // const signer = provider.getSigner();\n    // const contractAddress = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n    // const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    // let txnHash = await nftContract.mint(\n    //   ethereum.selectedAddress,\n    //   mint_amount,\n    //   {\n    //     gasLimit: \"285000\",\n    //     value: ethers.utils.parseEther((0.03 * mint_amount).toString()),\n    //   }\n    // );\n    // return txnHash;\n  }\n};\n\n_s(mint, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let totalMint = await nftContract.count();\n    return totalMint;\n  }\n};","map":{"version":3,"names":["contract","ethers","isMetaMaskInstalled","ethereum","mint","mint_amount","useEffect","fetchWallet","provider","providers","Web3Provider","window","send","signed","getSigner","setSigner","console","log","totalMintCount","signer","contractAddress","nftContract","Contract","totalMint","count"],"sources":["C:/Users/HP/Desktop/Matt/nft/bithu_main_files/bithu_v1.0/src/utils/web3mint.js"],"sourcesContent":["import contract from \"../contracts/bithuabi.json\";\nimport { ethers } from \"ethers\";\nimport { isMetaMaskInstalled, ethereum } from \"../config\";\n\nexport const mint = async (mint_amount) => {\n  useEffect(() => {\n    const fetchWallet = async () => {\n      const provider = new ethers.providers.Web3Provider(\n        window.ethereum,\n        \"any\"\n      );\n      await provider.send(\"eth_requestAccounts\", []);\n      const signed = provider.getSigner();\n      setSigner(signed);\n      console.log(signed);\n    };\n\n    fetchWallet();\n  }, []);\n  if (isMetaMaskInstalled()) {\n    console.log(\"hi there\");\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    console.log(provider);\n    \n    // const signer = provider.getSigner();\n    // const contractAddress = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n    // const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    // let txnHash = await nftContract.mint(\n    //   ethereum.selectedAddress,\n    //   mint_amount,\n    //   {\n    //     gasLimit: \"285000\",\n    //     value: ethers.utils.parseEther((0.03 * mint_amount).toString()),\n    //   }\n    // );\n    // return txnHash;\n  }\n};\n\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n\n    let totalMint = await nftContract.count();\n\n    return totalMint;\n  }\n};\n"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,4BAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,WAA9C;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAOC,WAAP,IAAuB;EAAA;;EACzCC,SAAS,CAAC,MAAM;IACd,MAAMC,WAAW,GAAG,YAAY;MAC9B,MAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CACfC,MAAM,CAACR,QADQ,EAEf,KAFe,CAAjB;MAIA,MAAMK,QAAQ,CAACI,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;MACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;MACAC,SAAS,CAACF,MAAD,CAAT;MACAG,OAAO,CAACC,GAAR,CAAYJ,MAAZ;IACD,CATD;;IAWAN,WAAW;EACZ,CAbQ,EAaN,EAbM,CAAT;;EAcA,IAAIL,mBAAmB,EAAvB,EAA2B;IACzBc,OAAO,CAACC,GAAR,CAAY,UAAZ;IACA,MAAMT,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCP,QAAlC,CAAjB;IACAa,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAHyB,CAKzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;AACF,CAjCM;;GAAMJ,I;;AAmCb,OAAO,MAAMc,cAAc,GAAG,YAAY;EACxC,IAAIhB,mBAAmB,EAAvB,EAA2B;IACzB,MAAMM,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCP,QAAlC,CAAjB;IACA,MAAMgB,MAAM,GAAGX,QAAQ,CAACM,SAAT,EAAf;IACA,MAAMM,eAAe,GAAG,4CAAxB;IACA,MAAMC,WAAW,GAAG,IAAIpB,MAAM,CAACqB,QAAX,CAAoBF,eAApB,EAAqCpB,QAArC,EAA+CmB,MAA/C,CAApB;IAEA,IAAII,SAAS,GAAG,MAAMF,WAAW,CAACG,KAAZ,EAAtB;IAEA,OAAOD,SAAP;EACD;AACF,CAXM"},"metadata":{},"sourceType":"module"}
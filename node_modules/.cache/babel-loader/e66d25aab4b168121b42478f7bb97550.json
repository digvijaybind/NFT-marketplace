{"ast":null,"code":"export const ethereum = window.ethereum; // check if metamask extension is installed on the browser\n\nexport const isMetaMaskInstalled = () => {\n  if (ethereum) {\n    return true;\n  }\n\n  return false;\n}; // connect to metakmask wallet\n\nexport const connectWallet = async () => {\n  const accounts = await ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  return accounts;\n}; // connect to metakmask wallet\n\nexport const connectAccount = async () => {\n  const accounts = await ethereum.request({\n    method: 'eth_accounts'\n  });\n  return accounts;\n}; // disconnect metamask wallet\n\nexport const disconnectWallet = () => {\n  localStorage.removeItem('isWalletConnected');\n  window.location.reload();\n}; // check metamask on disconnect\n\nexport const onMetamaskDisconnect = () => {\n  ethereum.on('disconnect', () => {\n    console.log('Disconnected');\n  });\n}; // check metamask on connected\n\nexport const onMetamaskconnect = async () => {\n  const chainId = await getChainId();\n  ethereum.on('connect', () => {\n    console.log(chainId);\n  });\n}; // on chain change\n\nexport const onChainChange = () => {\n  ethereum.on('chainChanged', _chainId => {\n    return parseInt(_chainId);\n  });\n};\nexport const getChainId = async () => {\n  const chainId = await ethereum.request({\n    method: 'eth_chainId'\n  });\n  return parseInt(chainId);\n};\nexport const isWalletConnected = () => {\n  if (localStorage.getItem('isWalletConnected') === 'true') {\n    return true;\n  }\n\n  return false;\n};\nexport const connectWalletLocaly = () => {\n  localStorage.setItem('isWalletConnected', true);\n};","map":{"version":3,"names":["ethereum","window","isMetaMaskInstalled","connectWallet","accounts","request","method","connectAccount","disconnectWallet","localStorage","removeItem","location","reload","onMetamaskDisconnect","on","console","log","onMetamaskconnect","chainId","getChainId","onChainChange","_chainId","parseInt","isWalletConnected","getItem","connectWalletLocaly","setItem"],"sources":["C:/Users/HP/Desktop/Matt/nft/bithu_main_files/bithu_v1.0/src/config.js"],"sourcesContent":["export const ethereum = window.ethereum;\n\n\n// check if metamask extension is installed on the browser\nexport const isMetaMaskInstalled = () =>{\n    if(ethereum){\n        return true;\n    }\n\n    return false;\n}\n\n\n// connect to metakmask wallet\nexport const connectWallet = async () =>{\n    const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n    \n    return accounts;\n}\n\n// connect to metakmask wallet\nexport const connectAccount = async () =>{\n    const accounts = await ethereum.request({method: 'eth_accounts'});\n    \n    return accounts;\n}\n\n\n// disconnect metamask wallet\nexport const disconnectWallet = () =>{\n    localStorage.removeItem('isWalletConnected');\n    window.location.reload();\n}\n\n// check metamask on disconnect\nexport const onMetamaskDisconnect = () =>{\n    ethereum.on('disconnect', () =>{\n        console.log('Disconnected');\n    });\n}\n\n\n// check metamask on connected\nexport const onMetamaskconnect = async () =>{\n    const chainId = await getChainId();\n    ethereum.on('connect', () =>{\n        console.log(chainId);\n    });\n}\n\n// on chain change\nexport const onChainChange = () =>{\n    ethereum.on('chainChanged', (_chainId) =>{\n        return parseInt(_chainId);\n    });\n}\n\nexport const getChainId = async () =>{\n    const chainId = await ethereum.request({ method: 'eth_chainId' });\n\n    return parseInt(chainId);\n}\n\n\nexport const isWalletConnected = () => {\n    if(localStorage.getItem('isWalletConnected') === 'true'){\n        return true\n    }\n\n    return false;\n}\n\nexport const connectWalletLocaly = () => {\n    localStorage.setItem('isWalletConnected', true);\n}"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAGC,MAAM,CAACD,QAAxB,C,CAGP;;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAK;EACpC,IAAGF,QAAH,EAAY;IACR,OAAO,IAAP;EACH;;EAED,OAAO,KAAP;AACH,CANM,C,CASP;;AACA,OAAO,MAAMG,aAAa,GAAG,YAAW;EACpC,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;IAACC,MAAM,EAAE;EAAT,CAAjB,CAAvB;EAEA,OAAOF,QAAP;AACH,CAJM,C,CAMP;;AACA,OAAO,MAAMG,cAAc,GAAG,YAAW;EACrC,MAAMH,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;IAACC,MAAM,EAAE;EAAT,CAAjB,CAAvB;EAEA,OAAOF,QAAP;AACH,CAJM,C,CAOP;;AACA,OAAO,MAAMI,gBAAgB,GAAG,MAAK;EACjCC,YAAY,CAACC,UAAb,CAAwB,mBAAxB;EACAT,MAAM,CAACU,QAAP,CAAgBC,MAAhB;AACH,CAHM,C,CAKP;;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAK;EACrCb,QAAQ,CAACc,EAAT,CAAY,YAAZ,EAA0B,MAAK;IAC3BC,OAAO,CAACC,GAAR,CAAY,cAAZ;EACH,CAFD;AAGH,CAJM,C,CAOP;;AACA,OAAO,MAAMC,iBAAiB,GAAG,YAAW;EACxC,MAAMC,OAAO,GAAG,MAAMC,UAAU,EAAhC;EACAnB,QAAQ,CAACc,EAAT,CAAY,SAAZ,EAAuB,MAAK;IACxBC,OAAO,CAACC,GAAR,CAAYE,OAAZ;EACH,CAFD;AAGH,CALM,C,CAOP;;AACA,OAAO,MAAME,aAAa,GAAG,MAAK;EAC9BpB,QAAQ,CAACc,EAAT,CAAY,cAAZ,EAA6BO,QAAD,IAAa;IACrC,OAAOC,QAAQ,CAACD,QAAD,CAAf;EACH,CAFD;AAGH,CAJM;AAMP,OAAO,MAAMF,UAAU,GAAG,YAAW;EACjC,MAAMD,OAAO,GAAG,MAAMlB,QAAQ,CAACK,OAAT,CAAiB;IAAEC,MAAM,EAAE;EAAV,CAAjB,CAAtB;EAEA,OAAOgB,QAAQ,CAACJ,OAAD,CAAf;AACH,CAJM;AAOP,OAAO,MAAMK,iBAAiB,GAAG,MAAM;EACnC,IAAGd,YAAY,CAACe,OAAb,CAAqB,mBAArB,MAA8C,MAAjD,EAAwD;IACpD,OAAO,IAAP;EACH;;EAED,OAAO,KAAP;AACH,CANM;AAQP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EACrChB,YAAY,CAACiB,OAAb,CAAqB,mBAArB,EAA0C,IAA1C;AACH,CAFM"},"metadata":{},"sourceType":"module"}
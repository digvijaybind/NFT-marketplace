{"ast":null,"code":"import contract from \"../contracts/bithuabi.json\";\nimport { ethers } from \"ethers\";\nimport { isMetaMaskInstalled, ethereum } from \"../config\";\nexport const mint = async mint_amount => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    console.log(\"hi there\");\n    const signer = provider.getSigner();\n    const contractAddress = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let txnHash = await nftContract.mint(ethereum.selectedAddress, mint_amount, {\n      gasLimit: \"285000\",\n      value: ethers.utils.parseEther((0.03 * mint_amount).toString())\n    });\n    return txnHash;\n  }\n};\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let totalMint = await nftContract.count();\n    return totalMint;\n  }\n};","map":{"version":3,"names":["contract","ethers","isMetaMaskInstalled","ethereum","mint","mint_amount","provider","providers","Web3Provider","console","log","signer","getSigner","contractAddress","nftContract","Contract","txnHash","selectedAddress","gasLimit","value","utils","parseEther","toString","totalMintCount","totalMint","count"],"sources":["C:/Users/HP/Desktop/Matt/nft/bithu_main_files/bithu_v1.0/src/utils/web3mint.js"],"sourcesContent":["import contract from \"../contracts/bithuabi.json\";\nimport { ethers } from \"ethers\";\nimport { isMetaMaskInstalled, ethereum } from \"../config\";\n\nexport const mint = async (mint_amount) => {\n  \n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    console.log(\"hi there\");\n    const signer = provider.getSigner();\n    const contractAddress = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let txnHash = await nftContract.mint(\n      ethereum.selectedAddress,\n      mint_amount,\n      {\n        gasLimit: \"285000\",\n        value: ethers.utils.parseEther((0.03 * mint_amount).toString()),\n      }\n    );\n    return txnHash;\n  }\n};\n\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n\n    let totalMint = await nftContract.count();\n\n    return totalMint;\n  }\n};\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,4BAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,WAA9C;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAOC,WAAP,IAAuB;EAEzC,IAAIH,mBAAmB,EAAvB,EAA2B;IACzB,MAAMI,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;IACAM,OAAO,CAACC,GAAR,CAAY,UAAZ;IACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;IACA,MAAMC,eAAe,GAAG,4CAAxB;IACA,MAAMC,WAAW,GAAG,IAAIb,MAAM,CAACc,QAAX,CAAoBF,eAApB,EAAqCb,QAArC,EAA+CW,MAA/C,CAApB;IACA,IAAIK,OAAO,GAAG,MAAMF,WAAW,CAACV,IAAZ,CAClBD,QAAQ,CAACc,eADS,EAElBZ,WAFkB,EAGlB;MACEa,QAAQ,EAAE,QADZ;MAEEC,KAAK,EAAElB,MAAM,CAACmB,KAAP,CAAaC,UAAb,CAAwB,CAAC,OAAOhB,WAAR,EAAqBiB,QAArB,EAAxB;IAFT,CAHkB,CAApB;IAQA,OAAON,OAAP;EACD;AACF,CAlBM;AAoBP,OAAO,MAAMO,cAAc,GAAG,YAAY;EACxC,IAAIrB,mBAAmB,EAAvB,EAA2B;IACzB,MAAMI,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;IACA,MAAMQ,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;IACA,MAAMC,eAAe,GAAG,4CAAxB;IACA,MAAMC,WAAW,GAAG,IAAIb,MAAM,CAACc,QAAX,CAAoBF,eAApB,EAAqCb,QAArC,EAA+CW,MAA/C,CAApB;IAEA,IAAIa,SAAS,GAAG,MAAMV,WAAW,CAACW,KAAZ,EAAtB;IAEA,OAAOD,SAAP;EACD;AACF,CAXM"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import contract from '../contracts/bithuabi.json';\nimport { ethers } from 'ethers';\nimport { isMetaMaskInstalled, ethereum } from '../config';\nexport const mint = async mint_amount => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let txnHash = await nftContract.mint(ethereum.selectedAddress, mint_amount, {\n      gasLimit: \"285000\",\n      value: ethers.utils.parseEther((0.03 * mint_amount).toString())\n    });\n    return txnHash;\n  }\n};\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let totalMint = await nftContract.count();\n    return totalMint;\n  }\n};","map":{"version":3,"names":["contract","ethers","isMetaMaskInstalled","ethereum","mint","mint_amount","provider","providers","Web3Provider","signer","getSigner","contractAddress","nftContract","Contract","txnHash","selectedAddress","gasLimit","value","utils","parseEther","toString","totalMintCount","totalMint","count"],"sources":["C:/Users/HP/Desktop/Matt/nft/bithu_main_files/bithu_v1.0/src/utils/web3mint.js"],"sourcesContent":["import contract from '../contracts/bithuabi.json';\nimport { ethers } from 'ethers';\nimport { isMetaMaskInstalled, ethereum } from '../config';\n\n\n\nexport const mint = async (mint_amount) => {\n    if(isMetaMaskInstalled()){\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n        const nftContract = new ethers.Contract(contractAddress, contract, signer);\n        let txnHash = await nftContract.mint(ethereum.selectedAddress, mint_amount, {\n            gasLimit: \"285000\",\n            value: ethers.utils.parseEther((0.03 * mint_amount).toString())\n        })\n        return txnHash\n    }\n}\n\nexport const totalMintCount = async () => {\n    if(isMetaMaskInstalled()){\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n        const nftContract = new ethers.Contract(contractAddress, contract, signer);\n\n        let totalMint = await nftContract.count();\n\n        return totalMint;\n    }\n}\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,4BAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,WAA9C;AAIA,OAAO,MAAMC,IAAI,GAAG,MAAOC,WAAP,IAAuB;EACvC,IAAGH,mBAAmB,EAAtB,EAAyB;IACrB,MAAMI,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;IACA,MAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;IACA,MAAMC,eAAe,GAAG,4CAAxB;IACA,MAAMC,WAAW,GAAG,IAAIX,MAAM,CAACY,QAAX,CAAoBF,eAApB,EAAqCX,QAArC,EAA+CS,MAA/C,CAApB;IACA,IAAIK,OAAO,GAAG,MAAMF,WAAW,CAACR,IAAZ,CAAiBD,QAAQ,CAACY,eAA1B,EAA2CV,WAA3C,EAAwD;MACxEW,QAAQ,EAAE,QAD8D;MAExEC,KAAK,EAAEhB,MAAM,CAACiB,KAAP,CAAaC,UAAb,CAAwB,CAAC,OAAOd,WAAR,EAAqBe,QAArB,EAAxB;IAFiE,CAAxD,CAApB;IAIA,OAAON,OAAP;EACH;AACJ,CAZM;AAcP,OAAO,MAAMO,cAAc,GAAG,YAAY;EACtC,IAAGnB,mBAAmB,EAAtB,EAAyB;IACrB,MAAMI,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;IACA,MAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;IACA,MAAMC,eAAe,GAAG,4CAAxB;IACA,MAAMC,WAAW,GAAG,IAAIX,MAAM,CAACY,QAAX,CAAoBF,eAApB,EAAqCX,QAArC,EAA+CS,MAA/C,CAApB;IAEA,IAAIa,SAAS,GAAG,MAAMV,WAAW,CAACW,KAAZ,EAAtB;IAEA,OAAOD,SAAP;EACH;AACJ,CAXM"},"metadata":{},"sourceType":"module"}
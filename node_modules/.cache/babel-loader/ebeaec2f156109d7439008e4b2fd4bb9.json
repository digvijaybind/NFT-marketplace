{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport contract from \"../contracts/bithuabi.json\";\nimport { ethers } from \"ethers\";\nimport { isMetaMaskInstalled, ethereum } from \"../config\";\nimport react, { useState, useEffect } from \"react\";\nexport const mint = async mint_amount => {\n  _s();\n\n  const [signer, setSigner] = useState(null);\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  await provider.send(\"eth_requestAccounts\", []);\n  const signed = provider.getSigner();\n  setSigner(signed);\n  console.log(signed);\n  const metadata = \"ipfs://bafyreiatv2m3rs4qbu43hu2jqfdzqem6acirj3k7l5ihpvsvrtsajo65yi/metadata.json\";\n  const user = await signer.getAddress();\n  const address = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n  let contract = new ethers.Contract(address, abi, signer);\n  let transaction = await contract.mint(user, metadata).wait;\n  let tx = await transaction.wait();\n  const receipt = await tx.wait(); // if (isMetaMaskInstalled()) {\n  //   console.log(\"hi there\");\n  //   const provider = new ethers.providers.Web3Provider(ethereum);\n  //   console.log(provider);\n  //   // const signer = provider.getSigner();\n  //   // const contractAddress = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n  //   // const nftContract = new ethers.Contract(contractAddress, contract, signer);\n  //   // let txnHash = await nftContract.mint(\n  //   //   ethereum.selectedAddress,\n  //   //   mint_amount,\n  //   //   {\n  //   //     gasLimit: \"285000\",\n  //   //     value: ethers.utils.parseEther((0.03 * mint_amount).toString()),\n  //   //   }\n  //   // );\n  //   // return txnHash;\n  // }\n};\n\n_s(mint, \"JTUxgAK2k/hgAbsHdm1nDhP0K2g=\");\n\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n    let totalMint = await nftContract.count();\n    return totalMint;\n  }\n};","map":{"version":3,"names":["contract","ethers","isMetaMaskInstalled","ethereum","react","useState","useEffect","mint","mint_amount","signer","setSigner","provider","providers","Web3Provider","window","send","signed","getSigner","console","log","metadata","user","getAddress","address","Contract","abi","transaction","wait","tx","receipt","totalMintCount","contractAddress","nftContract","totalMint","count"],"sources":["C:/Users/HP/Desktop/Matt/nft/bithu_main_files/bithu_v1.0/src/utils/web3mint.js"],"sourcesContent":["import contract from \"../contracts/bithuabi.json\";\nimport { ethers } from \"ethers\";\nimport { isMetaMaskInstalled, ethereum } from \"../config\";\nimport react, { useState, useEffect } from \"react\";\nexport const mint = async (mint_amount) => {\n  const [signer, setSigner] = useState(null);\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  await provider.send(\"eth_requestAccounts\", []);\n  const signed = provider.getSigner();\n  setSigner(signed);\n  console.log(signed);\n\n  const metadata =\n    \"ipfs://bafyreiatv2m3rs4qbu43hu2jqfdzqem6acirj3k7l5ihpvsvrtsajo65yi/metadata.json\";\n  const user = await signer.getAddress();\n  const address = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n  let contract = new ethers.Contract(address, abi, signer);\n  let transaction = await contract.mint(user, metadata).wait;\n  let tx = await transaction.wait();\n  const receipt = await tx.wait();\n\n  // if (isMetaMaskInstalled()) {\n  //   console.log(\"hi there\");\n  //   const provider = new ethers.providers.Web3Provider(ethereum);\n  //   console.log(provider);\n\n  //   // const signer = provider.getSigner();\n  //   // const contractAddress = \"0x33BFc30CB6c0AB4e863bAf6C85a1F292aB7b7795\";\n  //   // const nftContract = new ethers.Contract(contractAddress, contract, signer);\n  //   // let txnHash = await nftContract.mint(\n  //   //   ethereum.selectedAddress,\n  //   //   mint_amount,\n  //   //   {\n  //   //     gasLimit: \"285000\",\n  //   //     value: ethers.utils.parseEther((0.03 * mint_amount).toString()),\n  //   //   }\n  //   // );\n  //   // return txnHash;\n  // }\n};\n\nexport const totalMintCount = async () => {\n  if (isMetaMaskInstalled()) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const contractAddress = \"0x9FD56e423c9f0C01D4d011ad30860962ddaeA51D\";\n    const nftContract = new ethers.Contract(contractAddress, contract, signer);\n\n    let totalMint = await nftContract.count();\n\n    return totalMint;\n  }\n};\n"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,4BAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,WAA9C;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,MAAMC,IAAI,GAAG,MAAOC,WAAP,IAAuB;EAAA;;EACzC,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,IAAD,CAApC;EAEA,MAAMM,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACX,QAAzC,EAAmD,KAAnD,CAAjB;EACA,MAAMQ,QAAQ,CAACI,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;EACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;EACAP,SAAS,CAACM,MAAD,CAAT;EACAE,OAAO,CAACC,GAAR,CAAYH,MAAZ;EAEA,MAAMI,QAAQ,GACZ,kFADF;EAEA,MAAMC,IAAI,GAAG,MAAMZ,MAAM,CAACa,UAAP,EAAnB;EACA,MAAMC,OAAO,GAAG,4CAAhB;EACA,IAAIvB,QAAQ,GAAG,IAAIC,MAAM,CAACuB,QAAX,CAAoBD,OAApB,EAA6BE,GAA7B,EAAkChB,MAAlC,CAAf;EACA,IAAIiB,WAAW,GAAG,MAAM1B,QAAQ,CAACO,IAAT,CAAcc,IAAd,EAAoBD,QAApB,EAA8BO,IAAtD;EACA,IAAIC,EAAE,GAAG,MAAMF,WAAW,CAACC,IAAZ,EAAf;EACA,MAAME,OAAO,GAAG,MAAMD,EAAE,CAACD,IAAH,EAAtB,CAhByC,CAkBzC;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CApCM;;GAAMpB,I;;AAsCb,OAAO,MAAMuB,cAAc,GAAG,YAAY;EACxC,IAAI5B,mBAAmB,EAAvB,EAA2B;IACzB,MAAMS,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCV,QAAlC,CAAjB;IACA,MAAMM,MAAM,GAAGE,QAAQ,CAACM,SAAT,EAAf;IACA,MAAMc,eAAe,GAAG,4CAAxB;IACA,MAAMC,WAAW,GAAG,IAAI/B,MAAM,CAACuB,QAAX,CAAoBO,eAApB,EAAqC/B,QAArC,EAA+CS,MAA/C,CAApB;IAEA,IAAIwB,SAAS,GAAG,MAAMD,WAAW,CAACE,KAAZ,EAAtB;IAEA,OAAOD,SAAP;EACD;AACF,CAXM"},"metadata":{},"sourceType":"module"}